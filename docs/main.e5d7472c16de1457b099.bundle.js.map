{"version":3,"file":"main.e5d7472c16de1457b099.bundle.js","sources":["webpack:///./src/components/Grid/stories/Transition.stories.js"],"sourcesContent":["\n  export var withStorySource = require('@storybook/addon-storysource').withStorySource;\n  export var __STORY__ = \"import React from 'react';\\r\\nimport Grid from '../../../../src/components/Grid/';\\r\\n\\r\\nconst randomcolor = () => {\\r\\n  return ('00000' + ((Math.random() * (1 << 24)) | 0).toString(16)).slice(-6);\\r\\n};\\r\\n\\r\\nconst A = ({ current, send }) => {\\r\\n  const isClosed = current && current.value === 'CLOSED';\\r\\n\\r\\n  return (\\r\\n    <Grid\\r\\n      show={!isClosed}\\r\\n      transitionProps={{\\r\\n        config: { duration: 250 },\\r\\n        from: {\\r\\n          top: 0,\\r\\n          bottom: 0,\\r\\n          opacity: 0,\\r\\n          left: -100,\\r\\n          transform: 'scale(1)',\\r\\n        },\\r\\n        enter: { opacity: 1, left: 80, transform: 'scale(2)' },\\r\\n        leave: { opacity: 0, left: -100, transform: 'scale(1)' },\\r\\n      }}\\r\\n      css={`\\r\\n        width: 200px;\\r\\n        position: relative;\\r\\n        width: 100px;\\r\\n        margin: auto;\\r\\n        font-size: 50px;\\r\\n        user-select: none;\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n        cursor: pointer;\\r\\n\\r\\n        position: absolute;\\r\\n      `}\\r\\n      gridArea={'A'}\\r\\n    >\\r\\n      ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€\\r\\n    </Grid>\\r\\n  );\\r\\n};\\r\\n\\r\\nconst B = ({ current, send }) => {\\r\\n  const isClosed = current && current.value === 'CLOSED';\\r\\n\\r\\n  const isClosedAnim = {\\r\\n    to: { marginLeft: 0 },\\r\\n  };\\r\\n  const isOpenAnim = {\\r\\n    to: { marginLeft: 200 },\\r\\n  };\\r\\n  return (\\r\\n    <Grid\\r\\n      onClick={isClosed ? () => send('OPEN') : () => send('CLOSE')}\\r\\n      springProps={{\\r\\n        to: {\\r\\n          left: '0%',\\r\\n        },\\r\\n        background: `#${randomcolor()}`,\\r\\n        from: {\\r\\n          marginLeft: 300,\\r\\n          background: `#${randomcolor()}`,\\r\\n          position: 'absolute',\\r\\n          height: '100%',\\r\\n          width: '100%',\\r\\n        },\\r\\n\\r\\n        ...(isClosed ? isClosedAnim : isOpenAnim),\\r\\n      }}\\r\\n      css={``}\\r\\n      gridArea={'B'}\\r\\n    >\\r\\n      Open\\r\\n    </Grid>\\r\\n  );\\r\\n};\\r\\n\\r\\nconst State = () => {\\r\\n  const stateChart = {\\r\\n    initial: 'OPEN',\\r\\n    states: {\\r\\n      EXPANDED: {\\r\\n        on: {\\r\\n          COLLAPSE: 'COLLAPSED',\\r\\n        },\\r\\n      },\\r\\n      COLLAPSED: {\\r\\n        on: {\\r\\n          EXPAND: 'EXPANDED',\\r\\n        },\\r\\n      },\\r\\n      CLOSED: {\\r\\n        on: {\\r\\n          OPEN: 'OPEN',\\r\\n          COLLAPSE: 'COLLAPSED',\\r\\n\\r\\n          EXPAND: 'EXPANDED',\\r\\n        },\\r\\n      },\\r\\n      OPEN: {\\r\\n        on: {\\r\\n          CLOSE: 'CLOSED',\\r\\n          COLLAPSE: 'COLLAPSED',\\r\\n          EXPAND: 'EXPANDED',\\r\\n        },\\r\\n      },\\r\\n    },\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <React.Fragment>\\r\\n      <Grid\\r\\n        css={`\\r\\n          height: 100%;\\r\\n        `}\\r\\n        stateChart={stateChart}\\r\\n        render={({ send, current }) => {\\r\\n          return (\\r\\n            <React.Fragment>\\r\\n              <A send={send} current={current} />\\r\\n              <B send={send} current={current} />\\r\\n            </React.Fragment>\\r\\n          );\\r\\n        }}\\r\\n      />\\r\\n    </React.Fragment>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default State;\\r\\n\\r\\nimport { storiesOf } from '@storybook/react';\\r\\n\\r\\nstoriesOf('Examples', module).add('Spring Transition', () => <State />);\\r\\n\";\n  export var __ADDS_MAP__ = {\"examples--spring-transition\":{\"startLoc\":{\"col\":34,\"line\":137},\"endLoc\":{\"col\":70,\"line\":137}}};\n  \n  import React from 'react';\r\nimport Grid from '../../../../src/components/Grid/';\r\n\r\nconst randomcolor = () => {\r\n  return ('00000' + ((Math.random() * (1 << 24)) | 0).toString(16)).slice(-6);\r\n};\r\n\r\nconst A = ({ current, send }) => {\r\n  const isClosed = current && current.value === 'CLOSED';\r\n\r\n  return (\r\n    <Grid\r\n      show={!isClosed}\r\n      transitionProps={{\r\n        config: { duration: 250 },\r\n        from: {\r\n          top: 0,\r\n          bottom: 0,\r\n          opacity: 0,\r\n          left: -100,\r\n          transform: 'scale(1)',\r\n        },\r\n        enter: { opacity: 1, left: 80, transform: 'scale(2)' },\r\n        leave: { opacity: 0, left: -100, transform: 'scale(1)' },\r\n      }}\r\n      css={`\r\n        width: 200px;\r\n        position: relative;\r\n        width: 100px;\r\n        margin: auto;\r\n        font-size: 50px;\r\n        user-select: none;\r\n        display: flex;\r\n        align-items: center;\r\n        cursor: pointer;\r\n\r\n        position: absolute;\r\n      `}\r\n      gridArea={'A'}\r\n    >\r\n      ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst B = ({ current, send }) => {\r\n  const isClosed = current && current.value === 'CLOSED';\r\n\r\n  const isClosedAnim = {\r\n    to: { marginLeft: 0 },\r\n  };\r\n  const isOpenAnim = {\r\n    to: { marginLeft: 200 },\r\n  };\r\n  return (\r\n    <Grid\r\n      onClick={isClosed ? () => send('OPEN') : () => send('CLOSE')}\r\n      springProps={{\r\n        to: {\r\n          left: '0%',\r\n        },\r\n        background: `#${randomcolor()}`,\r\n        from: {\r\n          marginLeft: 300,\r\n          background: `#${randomcolor()}`,\r\n          position: 'absolute',\r\n          height: '100%',\r\n          width: '100%',\r\n        },\r\n\r\n        ...(isClosed ? isClosedAnim : isOpenAnim),\r\n      }}\r\n      css={``}\r\n      gridArea={'B'}\r\n    >\r\n      Open\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst State = () => {\r\n  const stateChart = {\r\n    initial: 'OPEN',\r\n    states: {\r\n      EXPANDED: {\r\n        on: {\r\n          COLLAPSE: 'COLLAPSED',\r\n        },\r\n      },\r\n      COLLAPSED: {\r\n        on: {\r\n          EXPAND: 'EXPANDED',\r\n        },\r\n      },\r\n      CLOSED: {\r\n        on: {\r\n          OPEN: 'OPEN',\r\n          COLLAPSE: 'COLLAPSED',\r\n\r\n          EXPAND: 'EXPANDED',\r\n        },\r\n      },\r\n      OPEN: {\r\n        on: {\r\n          CLOSE: 'CLOSED',\r\n          COLLAPSE: 'COLLAPSED',\r\n          EXPAND: 'EXPANDED',\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        css={`\r\n          height: 100%;\r\n        `}\r\n        stateChart={stateChart}\r\n        render={({ send, current }) => {\r\n          return (\r\n            <React.Fragment>\r\n              <A send={send} current={current} />\r\n              <B send={send} current={current} />\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default State;\r\n\r\nimport { storiesOf } from '@storybook/react';\r\n\r\nstoriesOf('Examples', module).addDecorator(withStorySource(__STORY__, __ADDS_MAP__)).add('Spring Transition', () => <State />);\r\n\n  "],"mappings":"AACA","sourceRoot":""}